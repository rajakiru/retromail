
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Digital Mail Club</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Special+Elite&family=Caveat:wght@400;600&display=swap" rel="stylesheet">
    
    <style>
        :root {
            --cream: #F7F2EA;
            --dusty-blue: #7FA3B2;
            --warm-yellow: #F1C96B;
            --kraft: #D4B89B;
            --faded-rose: #C98088;
            --ink: #3B3A39;
            --moss: #6C7A5C;
            --paper-shadow: rgba(0,0,0,.08);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: "Special Elite", "Courier New", monospace;
            background: linear-gradient(135deg, var(--cream) 0%, #F0EBE3 100%);
            color: var(--ink);
            min-height: 100vh;
            overflow-x: hidden;
            background-image: 
                radial-gradient(circle at 20% 50%, transparent 20%, rgba(0,0,0,0.02) 21%, rgba(0,0,0,0.02) 34%, transparent 35%, transparent),
                linear-gradient(0deg, transparent 24%, rgba(0,0,0,0.01) 25%, rgba(0,0,0,0.01) 26%, transparent 27%, transparent 74%, rgba(0,0,0,0.01) 75%, rgba(0,0,0,0.01) 76%, transparent 77%, transparent);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .club-title {
            font-family: "Caveat", cursive;
            font-size: 2.5rem;
            color: var(--moss);
            margin-bottom: 5px;
            text-shadow: 2px 2px 4px var(--paper-shadow);
        }

        .privacy-label {
            font-size: 0.9rem;
            color: var(--dusty-blue);
            opacity: 0.8;
        }

        .view {
            display: none;
        }

        .view.active {
            display: block;
        }

        /* Mailbox View */
        .mailbox {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 30px;
            margin-top: 40px;
        }

        .envelope {
            position: relative;
            width: 500px;
            height: 320px;
            background: var(--kraft);
            border-radius: 12px;
            box-shadow: 0 8px 25px var(--paper-shadow);
            cursor: pointer;
            transition: all 0.3s ease;
            transform-style: preserve-3d;
        }

        .envelope:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 35px var(--paper-shadow);
        }

        .envelope-front {
            position: absolute;
            width: 100%;
            height: 100%;
            background: var(--kraft);
            border-radius: 8px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .envelope-flap {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100px;
            background: linear-gradient(135deg, var(--kraft) 0%, #C9A98A 100%);
            clip-path: polygon(0 0, 100% 0, 85% 100%, 15% 100%);
            transform-origin: top center;
            transition: transform 0.6s cubic-bezier(.2,.7,.2,1);
            z-index: 3;
            border-radius: 12px 12px 0 0;
        }

        .envelope.opening .envelope-flap {
            transform: rotateX(-120deg);
        }

        .wax-seal {
            position: absolute;
            top: 70px;
            left: 50%;
            transform: translateX(-50%);
            width: 40px;
            height: 40px;
            background: var(--faded-rose);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 4;
            transition: all 0.3s ease;
        }

        .wax-seal::after {
            content: "★";
            color: var(--cream);
            font-size: 18px;
        }

        .addressee {
            font-family: "Caveat", cursive;
            font-size: 2rem;
            color: var(--ink);
            text-align: center;
            margin-top: 150px;
            z-index: 1;
            position: relative;
        }

        .postage-area {
            position: absolute;
            top: 40px;
            right: 40px;
            width: 90px;
            height: 90px;
            border: 3px dashed var(--dusty-blue);
            border-radius: 8px;
            opacity: 0.4;
            z-index: 1;
        }

        .stamp {
            position: absolute;
            width: 45px;
            height: 45px;
            background: var(--warm-yellow);
            border: 3px solid white;
            border-radius: 3px;
            cursor: grab;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            box-shadow: 0 2px 8px var(--paper-shadow);
            transition: transform 0.2s ease;
            z-index: 10;
            user-select: none;
        }

        .stamp:hover {
            transform: scale(1.1) rotate(2deg);
        }

        .stamp.dragging {
            cursor: grabbing;
            transform: scale(1.2) rotate(5deg);
            z-index: 20;
        }

        .stamp.on-envelope {
            position: absolute;
            z-index: 2;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .stamp.on-envelope:hover {
            transform: scale(1.1) rotate(0deg) !important;
            box-shadow: 0 4px 12px var(--paper-shadow);
            filter: brightness(1.1);
        }

        .stamp.on-envelope:hover::after {
            content: "✕";
            position: absolute;
            top: -8px;
            right: -8px;
            width: 18px;
            height: 18px;
            background: var(--faded-rose);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
        }

        .stamps-tray {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            padding: 15px;
            background: rgba(255,255,255,0.2);
            border-radius: 12px;
            backdrop-filter: blur(5px);
        }

        .nav-buttons {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 20px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 20px;
            font-family: "Special Elite", monospace;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            box-shadow: 0 4px 12px var(--paper-shadow);
        }

        .btn-primary {
            background: var(--dusty-blue);
            color: white;
        }

        .btn-secondary {
            background: var(--warm-yellow);
            color: var(--ink);
        }

        .btn-tertiary {
            background: var(--moss);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px var(--paper-shadow);
        }

        .unread-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--faded-rose);
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
            z-index: 4;
        }

        /* Letter View */
        .letter-view {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .letter-card {
            background: var(--cream);
            border-radius: 12px;
            padding: 40px;
            box-shadow: 0 12px 40px var(--paper-shadow);
            position: relative;
            background-image: 
                repeating-linear-gradient(
                    transparent,
                    transparent 24px,
                    rgba(111, 122, 92, 0.1) 25px,
                    rgba(111, 122, 92, 0.1) 26px
                );
            max-height: 70vh;
            overflow-y: auto;
            animation: slideIn 0.8s cubic-bezier(.2,.7,.2,1);
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px) rotate(-2deg);
            }
            to {
                opacity: 1;
                transform: translateY(0) rotate(0);
            }
        }

        @keyframes slideOut {
            from {
                opacity: 1;
                transform: translateY(0) rotate(0);
            }
            to {
                opacity: 0;
                transform: translateY(-30px) rotate(2deg);
            }
        }

        .letter-meta {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            font-size: 0.9rem;
            color: var(--moss);
            border-bottom: 1px solid rgba(111, 122, 92, 0.2);
            padding-bottom: 10px;
        }

        .letter-body {
            font-family: "Caveat", cursive;
            font-size: 1.3rem;
            line-height: 1.8;
            color: var(--ink);
        }

        .letter-actions {
            display: flex;
            gap: 10px;
            margin-top: 30px;
            justify-content: center;
        }

        /* Write View */
        .write-form {
            max-width: 700px;
            margin: 0 auto;
            background: var(--cream);
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 12px 40px var(--paper-shadow);
            background-image: 
                repeating-linear-gradient(
                    transparent,
                    transparent 24px,
                    rgba(111, 122, 92, 0.1) 25px,
                    rgba(111, 122, 92, 0.1) 26px
                );
        }

        /* Paper Styles */
        .paper-vintage { 
            background: linear-gradient(135deg, #f4f1de 0%, #e9dcc9 100%);
            background-image: 
                radial-gradient(circle at 20% 80%, rgba(120,119,108,0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(120,119,108,0.15) 0%, transparent 50%);
        }
        .paper-typewriter { 
            background: #f8f6f0;
            background-image: repeating-linear-gradient(transparent, transparent 23px, #d4af37 23px, #d4af37 24px);
        }
        .paper-telegram { 
            background: #fff8dc;
            background-image: 
                linear-gradient(90deg, #daa520 0px, #daa520 2px, transparent 2px),
                repeating-linear-gradient(transparent, transparent 19px, #daa520 19px, #daa520 20px);
        }
        .paper-manuscript { 
            background: #faf0e6;
            background-image: 
                repeating-linear-gradient(transparent, transparent 29px, #8b4513 29px, #8b4513 30px),
                linear-gradient(90deg, #cd853f 79px, #cd853f 81px, transparent 81px);
        }
        .paper-wartime { 
            background: #f5f5dc;
            background-image: 
                linear-gradient(45deg, transparent 40%, rgba(139,69,19,0.1) 50%, transparent 60%),
                repeating-linear-gradient(transparent, transparent 24px, rgba(139,69,19,0.2) 24px, rgba(139,69,19,0.2) 25px);
        }
        .paper-royal { 
            background: linear-gradient(135deg, #f8f5ff 0%, #e6e0ff 100%);
            background-image: 
                radial-gradient(circle at 50% 50%, rgba(138,43,226,0.1) 0%, transparent 50%),
                repeating-linear-gradient(transparent, transparent 24px, rgba(138,43,226,0.1) 24px, rgba(138,43,226,0.1) 25px);
        }
        .paper-nature { 
            background: linear-gradient(135deg, #f0fff0 0%, #e8f5e8 100%);
            background-image: 
                radial-gradient(circle at 30% 70%, rgba(34,139,34,0.1) 0%, transparent 40%),
                repeating-linear-gradient(transparent, transparent 24px, rgba(34,139,34,0.1) 24px, rgba(34,139,34,0.1) 25px);
        }
        .paper-sunset { 
            background: linear-gradient(135deg, #fff5ee 0%, #ffe4e1 100%);
            background-image: 
                radial-gradient(circle at 80% 20%, rgba(255,69,0,0.1) 0%, transparent 50%),
                repeating-linear-gradient(transparent, transparent 24px, rgba(255,69,0,0.1) 24px, rgba(255,69,0,0.1) 25px);
        }

        /* Customization Panel */
        .customization-panel {
            background: rgba(255,255,255,0.3);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            backdrop-filter: blur(5px);
        }

        .custom-section {
            margin-bottom: 20px;
        }

        .custom-section h4 {
            font-family: 'Caveat', cursive;
            font-size: 1.2rem;
            margin-bottom: 10px;
            color: var(--moss);
        }

        .option-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
            gap: 10px;
            margin-bottom: 15px;
        }

        .option-btn {
            width: 60px;
            height: 60px;
            border: 2px solid var(--dusty-blue);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            background: white;
            position: relative;
        }

        .option-btn.active {
            border-color: var(--moss);
            transform: scale(1.1);
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }

        .font-preview {
            font-size: 0.8rem;
            text-align: center;
            padding: 5px;
        }

        .color-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid white;
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .color-btn.active {
            transform: scale(1.2);
            border-color: var(--ink);
        }

        .decoration-preview {
            display: flex;
            gap: 5px;
            margin-top: 10px;
            flex-wrap: wrap;
        }

        .decoration-item {
            background: rgba(255,255,255,0.8);
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .decoration-item:hover {
            transform: scale(1.1);
        }

        .image-upload {
            border: 2px dashed var(--dusty-blue);
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .image-upload:hover {
            border-color: var(--moss);
            background: rgba(255,255,255,0.1);
        }

        .image-upload input {
            display: none;
        }

        .uploaded-images {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
        }

        .uploaded-image {
            position: relative;
            width: 80px;
            height: 80px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px var(--paper-shadow);
        }

        .uploaded-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .remove-image {
            position: absolute;
            top: -5px;
            right: -5px;
            width: 20px;
            height: 20px;
            background: var(--faded-rose);
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .letter-preview {
            margin-top: 20px;
        }

        .preview-card {
            background: var(--cream);
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 15px var(--paper-shadow);
            min-height: 200px;
        }

        .preview-content {
            font-family: 'Caveat', cursive;
            font-size: 1.2rem;
            line-height: 1.8;
            color: var(--ink);
        }

        .preview-text {
            white-space: pre-wrap;
            margin-bottom: 15px;
        }

        .preview-decorations {
            font-size: 1.3rem;
            text-align: center;
            margin-bottom: 10px;
        }

        .preview-images {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .preview-images img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
            box-shadow: 0 2px 4px var(--paper-shadow);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-size: 0.9rem;
            color: var(--moss);
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--dusty-blue);
            border-radius: 6px;
            font-family: inherit;
            font-size: 1rem;
            background: rgba(255,255,255,0.8);
        }

        .form-group textarea {
            font-family: "Caveat", cursive;
            font-size: 1.2rem;
            min-height: 200px;
            resize: vertical;
            line-height: 1.8;
        }

        /* Memory Box */
        .memory-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .memory-item {
            background: var(--kraft);
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px var(--paper-shadow);
            position: relative;
        }

        .memory-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px var(--paper-shadow);
        }

        .memory-item h3 {
            font-family: "Caveat", cursive;
            font-size: 1.2rem;
            margin-bottom: 5px;
            color: var(--ink);
        }

        .memory-item p {
            font-size: 0.8rem;
            color: var(--moss);
            opacity: 0.8;
        }

        .search-box {
            width: 100%;
            max-width: 300px;
            padding: 10px;
            border: 1px solid var(--dusty-blue);
            border-radius: 20px;
            font-family: inherit;
            margin-bottom: 20px;
        }

        /* Toast notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--moss);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 15px var(--paper-shadow);
            z-index: 1000;
            animation: toastSlide 3s ease-in-out;
        }

        @keyframes toastSlide {
            0%, 100% { transform: translateX(300px); opacity: 0; }
            10%, 90% { transform: translateX(0); opacity: 1; }
        }

        /* Code Modal */
        .code-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }

        .code-modal-content {
            background: var(--cream);
            padding: 40px;
            border-radius: 15px;
            text-align: center;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .code-display {
            background: var(--moss);
            color: white;
            padding: 20px;
            border-radius: 10px;
            font-size: 2rem;
            font-weight: bold;
            letter-spacing: 0.3em;
            margin: 20px 0;
            font-family: 'Special Elite', monospace;
        }

        .code-modal h2 {
            font-family: 'Caveat', cursive;
            font-size: 2rem;
            color: var(--moss);
            margin-bottom: 15px;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .envelope {
                width: 450px;
                height: 280px;
            }
            
            .club-title {
                font-size: 2rem;
            }
            
            .letter-card,
            .write-form {
                padding: 20px;
                margin: 10px;
            }
            
            .nav-buttons {
                gap: 10px;
            }
            
            .btn {
                padding: 8px 16px;
                font-size: 0.8rem;
            }
        }

        /* Focus styles */
        .btn:focus,
        .envelope:focus,
        .memory-item:focus,
        .stamp:focus {
            outline: 2px solid var(--dusty-blue);
            outline-offset: 2px;
        }

        input:focus,
        textarea:focus {
            outline: 2px solid var(--dusty-blue);
            outline-offset: 1px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="club-title">Digital Mail Club</h1>
            <p class="privacy-label">Send letters to anyone</p>
        </div>

        <div id="mailbox-view" class="view active">
            <div class="mailbox">
                <div class="envelope" onclick="openLetter()" ondrop="dropStamp(event)" ondragover="allowDrop(event)" role="button" tabindex="0" aria-expanded="false" aria-label="Open letter">
                    <div class="envelope-front">
                        <div class="postage-area"></div>
                        <div class="addressee">Your Mailbox</div>
                    </div>
                    <div class="envelope-flap"></div>
                    <div class="wax-seal"></div>
                    <div class="unread-badge" id="unread-count">0</div>
                </div>

                <div class="stamps-tray">
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="📮">📮</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="🌟">🌟</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="🍃">🍃</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="💌">💌</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="🌙">🌙</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="🕊️">🕊️</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="🌻">🌻</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="🦋">🦋</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="💖">💖</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="🌈">🌈</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="⭐">⭐</div>
                    <div class="stamp" draggable="true" ondragstart="dragStart(event)" data-stamp="🎀">🎀</div>
                </div>

                <div class="nav-buttons">
                    <button class="btn btn-primary" onclick="showView('write')">Write New</button>
                    <button class="btn btn-secondary" onclick="showView('receive')">Receive Letter</button>
                    <button class="btn btn-tertiary" onclick="showView('received')">Received Letters</button>
                    <button class="btn" onclick="clearAllStamps()" style="background: var(--faded-rose); color: white;">Clear Stamps</button>
                </div>
            </div>
        </div>

        <div id="letter-view" class="view">
            <div class="letter-view">
                <div class="letter-card" id="letter-content">
                    </div>
                <div class="letter-actions">
                    <button class="btn btn-secondary" onclick="replyToLetter()">Reply</button>
                    <button class="btn btn-primary" onclick="closeLetter()">Close Letter</button>
                </div>
            </div>
        </div>

        <div id="write-view" class="view">
            <div class="write-form">
                <h2>Write a Letter</h2>
                <form id="letter-form" onsubmit="sendLetter(event)">
                    <div class="form-group">
                        <label for="to-field">To:</label>
                        <input type="text" id="to-field" required placeholder="Enter recipient name">
                    </div>
                    <div class="form-group">
                        <label for="subject-field">Subject:</label>
                        <input type="text" id="subject-field" required>
                    </div>
                    
                    <div class="customization-panel">
                        <div class="custom-section">
                            <h4>📜 Paper Style</h4>
                            <div class="option-grid">
                                <div class="option-btn active" data-paper="vintage" title="Vintage Parchment">📜</div>
                                <div class="option-btn" data-paper="typewriter" title="Typewriter Paper">⌨️</div>
                                <div class="option-btn" data-paper="telegram" title="Telegram Form">📠</div>
                                <div class="option-btn" data-paper="manuscript" title="Manuscript Paper">🖋️</div>
                                <div class="option-btn" data-paper="wartime" title="Wartime Letter">✉️</div>
                                <div class="option-btn" data-paper="royal" title="Royal Paper">👑</div>
                                <div class="option-btn" data-paper="nature" title="Nature Paper">🌿</div>
                                <div class="option-btn" data-paper="sunset" title="Sunset Paper">🌅</div>
                            </div>
                        </div>
                        
                        <div class="custom-section">
                            <h4>✍️ Font Style</h4>
                            <div class="option-grid">
                                <div class="option-btn active" data-font="caveat" title="Handwritten">
                                    <div class="font-preview" style="font-family: 'Caveat', cursive;">Aa</div>
                                </div>
                                <div class="option-btn" data-font="special-elite" title="Typewriter">
                                    <div class="font-preview" style="font-family: 'Special Elite', monospace;">Aa</div>
                                </div>
                                <div class="option-btn" data-font="serif" title="Classic Serif">
                                    <div class="font-preview" style="font-family: serif;">Aa</div>
                                </div>
                                <div class="option-btn" data-font="cursive" title="Elegant Script">
                                    <div class="font-preview" style="font-family: cursive;">Aa</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="custom-section">
                            <h4>🎨 Text Color</h4>
                            <div class="option-grid">
                                <div class="color-btn active" data-color="#3B3A39" style="background: #3B3A39;" title="Ink Black"></div>
                                <div class="color-btn" data-color="#6C7A5C" style="background: #6C7A5C;" title="Forest Green"></div>
                                <div class="color-btn" data-color="#7FA3B2" style="background: #7FA3B2;" title="Ocean Blue"></div>
                                <div class="color-btn" data-color="#C98088" style="background: #C98088;" title="Rose Pink"></div>
                                <div class="color-btn" data-color="#8B4513" style="background: #8B4513;" title="Sepia Brown"></div>
                                <div class="color-btn" data-color="#4B0082" style="background: #4B0082;" title="Royal Purple"></div>
                                <div class="color-btn" data-color="#DC143C" style="background: #DC143C;" title="Crimson Red"></div>
                                <div class="color-btn" data-color="#FF8C00" style="background: #FF8C00;" title="Sunset Orange"></div>
                            </div>
                        </div>
                        
                        <div class="custom-section">
                            <h4>✨ Decorations</h4>
                            <div class="option-grid">
                                <div class="option-btn" data-decoration="🌟">🌟</div>
                                <div class="option-btn" data-decoration="💖">💖</div>
                                <div class="option-btn" data-decoration="🌸">🌸</div>
                                <div class="option-btn" data-decoration="🦋">🦋</div>
                                <div class="option-btn" data-decoration="✨">✨</div>
                                <div class="option-btn" data-decoration="🌙">🌙</div>
                                <div class="option-btn" data-decoration="🍃">🍃</div>
                                <div class="option-btn" data-decoration="💫">💫</div>
                                <div class="option-btn" data-decoration="🌹">🌹</div>
                                <div class="option-btn" data-decoration="🕊️">🕊️</div>
                                <div class="option-btn" data-decoration="🎭">🎭</div>
                                <div class="option-btn" data-decoration="🎨">🎨</div>
                            </div>
                            <div class="decoration-preview" id="decoration-preview"></div>
                        </div>
                        
                        <div class="custom-section">
                            <h4>📷 Add Images</h4>
                            <div class="image-upload" onclick="document.getElementById('image-input').click()">
                                <input type="file" id="image-input" accept="image/*" multiple onchange="handleImageUpload(event)">
                                <div>📷 Click to upload images</div>
                                <div style="font-size: 0.8rem; color: var(--moss); margin-top: 5px;">JPG, PNG, GIF supported</div>
                            </div>
                            <div class="uploaded-images" id="uploaded-images"></div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="body-field">Your Letter:</label>
                        <textarea id="body-field" required placeholder="Dear friend..." oninput="updatePreview()"></textarea>
                    </div>
                    
                    <div class="letter-preview">
                        <h4>📖 Preview</h4>
                        <div class="preview-card" id="preview-card">
                            <div class="preview-content" id="preview-content">
                                <div class="preview-decorations" id="preview-decorations"></div>
                                <div class="preview-text" id="preview-text">Dear friend...</div>
                                <div class="preview-images" id="preview-images"></div>
                            </div>
                        </div>
                    </div>
                    <div class="nav-buttons">
                        <button type="submit" class="btn btn-primary">Seal & Send</button>
                        <button type="button" class="btn btn-secondary" onclick="cancelWriting()">Cancel</button>
                    </div>
                </form>
            </div>
        </div>

        <div id="receive-view" class="view">
            <div class="write-form">
                <h2>Receive Letter</h2>
                <p style="margin-bottom: 20px; color: var(--moss);">Got a letter code from someone? Enter it below:</p>
                <div class="form-group">
                    <label for="letter-code">6-Digit Code:</label>
                    <input type="text" id="letter-code" placeholder="ABC123" maxlength="6" style="text-transform: uppercase; text-align: center; font-size: 1.5rem; letter-spacing: 0.2em;">
                </div>
                <div class="nav-buttons">
                    <button class="btn btn-primary" onclick="receiveLetter()">Open Letter</button>
                    <button class="btn btn-secondary" onclick="showView('mailbox')">Back to Mailbox</button>
                </div>
            </div>
        </div>

        <div id="received-view" class="view">
            <h2>Received Letters</h2>
            <input type="text" class="search-box" placeholder="Search letters..." oninput="filterReceivedLetters(this.value)">
            <div class="memory-grid" id="received-grid">
                </div>
            <div class="nav-buttons">
                <button class="btn btn-primary" onclick="showView('mailbox')">Back to Mailbox</button>
            </div>
        </div>
    </div>

    <script>
        // App state
        let state = {
            letters: [],
            currentLetter: null
        };

        // Customization state
        let selectedPaper = 'vintage';
        let selectedFont = 'caveat';
        let selectedColor = '#3B3A39';
        let selectedDecorations = [];
        let uploadedImages = [];

        // Initialize app
        function initializeApp() {
            const savedState = localStorage.getItem('digitalMailClub');
            if (savedState) {
                state = JSON.parse(savedState);
            }
            updateUI();
        }

        function saveState() {
            localStorage.setItem('digitalMailClub', JSON.stringify(state));
        }

        function updateUI() {
            updateUnreadCount();
            updateReceivedLetters();
            updateMailboxDisplay();
        }

        function updateUnreadCount() {
            const unreadCount = state.letters.filter(letter => !letter.read && letter.received).length;
            const badge = document.getElementById('unread-count');
            if (unreadCount > 0) {
                badge.textContent = unreadCount;
                badge.style.display = 'flex';
            } else {
                badge.style.display = 'none';
            }
        }

        function updateMailboxDisplay() {
            const envelope = document.querySelector('.envelope');
            const unreadCount = state.letters.filter(letter => !letter.read && letter.received).length;
            
            if (unreadCount === 0) {
                envelope.style.opacity = '0.5';
                envelope.style.cursor = 'default';
            } else {
                envelope.style.opacity = '1';
                envelope.style.cursor = 'pointer';
            }
        }

        function showView(viewName) {
            document.querySelectorAll('.view').forEach(view => {
                view.classList.remove('active');
            });
            document.getElementById(viewName + '-view').classList.add('active');

            if (viewName === 'write') {
                setupWriteForm();
            } else if (viewName === 'received') {
                updateReceivedLetters();
            }
        }

        function openLetter() {
            const envelope = document.querySelector('.envelope');
            const unreadLetters = state.letters.filter(letter => !letter.read && letter.received);

            if (unreadLetters.length > 0) {
                envelope.classList.add('opening');
                const letter = unreadLetters[0];
                letter.read = true;
                state.currentLetter = letter;
                saveState();

                setTimeout(() => {
                    displayLetter(letter);
                    showView('letter');
                    envelope.classList.remove('opening');
                    updateMailboxDisplay();
                }, 900);
            } else {
                showToast('No new letters in your mailbox!');
            }
        }

        function displayLetter(letter) {
            const content = document.getElementById('letter-content');
            const date = new Date(letter.dateISO).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            // Apply custom styles if available
            if (letter.paperStyle) {
                content.className = `letter-card paper-${letter.paperStyle}`;
            }

            let decorationsHtml = '';
            if (letter.decorations && letter.decorations.length > 0) {
                decorationsHtml = `<div style="text-align: center; font-size: 1.5rem; margin-bottom: 15px;">${letter.decorations.join(' ')}</div>`;
            }

            let imagesHtml = '';
            if (letter.images && letter.images.length > 0) {
                imagesHtml = '<div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 15px;">';
                letter.images.forEach(img => {
                    imagesHtml += `<img src="${img}" style="width: 100px; height: 100px; object-fit: cover; border-radius: 8px; box-shadow: 0 2px 8px var(--paper-shadow);" alt="Attached image">`;
                });
                imagesHtml += '</div>';
            }

            const fontFamily = letter.fontStyle ? getFontFamily(letter.fontStyle) : "'Caveat', cursive";
            const textColor = letter.textColor || 'var(--ink)';

            content.innerHTML = `
                <div class="letter-meta">
                    <div>From: <strong>${letter.from}</strong></div>
                    <div>${date}</div>
                </div>
                ${decorationsHtml}
                <h3 style="font-family: ${fontFamily}; font-size: 1.5rem; margin-bottom: 15px; color: var(--moss);">${letter.subject}</h3>
                <div class="letter-body" style="font-family: ${fontFamily}; color: ${textColor};">${letter.body.replace(/\n/g, '<br>')}</div>
                ${imagesHtml}
            `;
        }

        function generateCode() {
            return Math.random().toString(36).substr(2, 6).toUpperCase();
        }

        function setupWriteForm(isReply = false, originalLetter = null) {
            const toField = document.getElementById('to-field');
            const subjectField = document.getElementById('subject-field');
            const bodyField = document.getElementById('body-field');

            if (isReply && originalLetter) {
                toField.value = originalLetter.from;
                subjectField.value = originalLetter.subject.startsWith('Re: ') ? originalLetter.subject : `Re: ${originalLetter.subject}`;
                bodyField.value = `\n\n---\nReplying to: "${originalLetter.subject}" from ${originalLetter.from}`;
                bodyField.focus();
                bodyField.setSelectionRange(0, 0);
            } else {
                toField.value = '';
                subjectField.value = '';
                bodyField.value = '';
                bodyField.placeholder = 'Dear friend...';
                setTimeout(() => toField.focus(), 100);
            }
        }

        function closeLetter() {
            const letterCard = document.querySelector('.letter-card');
            if (letterCard) {
                letterCard.style.animation = 'slideOut 0.6s cubic-bezier(.2,.7,.2,1)';
                setTimeout(() => {
                    showView('mailbox');
                    letterCard.style.animation = '';
                }, 500);
            } else {
                showView('mailbox');
            }
        }

        function sendLetter(event) {
            event.preventDefault();
            
            const to = document.getElementById('to-field').value.trim();
            const subject = document.getElementById('subject-field').value.trim();
            const body = document.getElementById('body-field').value.trim();

            if (!to || !subject || !body) {
                showToast('Please fill in all fields');
                return false;
            }

            const letterCode = generateCode();
            const newLetter = {
                id: 'letter_' + Date.now(),
                from: 'You',
                to: to,
                subject: subject,
                body: body,
                dateISO: new Date().toISOString(),
                read: false,
                code: letterCode,
                paperStyle: selectedPaper,
                fontStyle: selectedFont,
                textColor: selectedColor,
                decorations: [...selectedDecorations],
                images: [...uploadedImages]
            };

            // Store in shared letters for code access
            let sharedLetters = JSON.parse(localStorage.getItem('sharedLetters')) || {};
            sharedLetters[letterCode] = newLetter;
            localStorage.setItem('sharedLetters', JSON.stringify(sharedLetters));

            state.letters.push(newLetter);
            saveState();

            // Show sealing animation/feedback
            const submitBtn = document.querySelector('#letter-form button[type="submit"]');
            submitBtn.disabled = true;
            submitBtn.textContent = 'Sealing...';
            
            // Show code modal
            setTimeout(() => {
                showCodeModal(letterCode, to);
                resetWriteForm();
                showView('mailbox');
                updateUI();
                submitBtn.disabled = false;
                submitBtn.textContent = 'Seal & Send';
            }, 1500);

            return false;
        }

        function showCodeModal(code, recipient) {
            const modal = document.createElement('div');
            modal.className = 'code-modal';
            modal.innerHTML = `
                <div class="code-modal-content">
                    <h2>Letter Sent! 💌</h2>
                    <p>Share this code with ${recipient}:</p>
                    <div class="code-display">${code}</div>
                    <p style="font-size: 0.9rem; color: var(--moss); margin-bottom: 20px;">They can use this code in "Receive Letter" to read your message.</p>
                    <button class="btn btn-primary" onclick="closeCodeModal()">Got it!</button>
                </div>
            `;
            document.body.appendChild(modal);
        }

        function closeCodeModal() {
            const modal = document.querySelector('.code-modal');
            if (modal) {
                modal.remove();
            }
        }

        function receiveLetter() {
            const code = document.getElementById('letter-code').value.trim().toUpperCase();
            
            if (!code) {
                showToast('Please enter a letter code!');
                return;
            }

            const sharedLetters = JSON.parse(localStorage.getItem('sharedLetters')) || {};
            const letter = sharedLetters[code];
            
            if (!letter) {
                showToast('Invalid code! Please check and try again.');
                return;
            }

            // Check if letter already exists (only check received letters, not sent ones)
            const existingLetter = state.letters.find(l => l.code === code && l.from !== 'You');
            if (existingLetter) {
                showToast('Letter already received!');
                return;
            }
            
            // Add to personal mailbox
            const receivedLetter = {
                ...letter,
                id: 'received_' + Date.now(),
                read: false,
                received: true
            };
            
            state.letters.push(receivedLetter);
            saveState();
            
            document.getElementById('letter-code').value = '';
            showToast('Letter received! Check your mailbox.');
            
            setTimeout(() => {
                showView('mailbox');
                updateUI();
            }, 1500);
        }

        function resetWriteForm() {
            document.getElementById('to-field').value = '';
            document.getElementById('subject-field').value = '';
            document.getElementById('body-field').value = '';
            document.getElementById('body-field').placeholder = 'Dear friend...';
            document.getElementById('letter-form').reset();
            
            // Reset customizations
            selectedPaper = 'vintage';
            selectedFont = 'caveat';
            selectedColor = '#3B3A39';
            selectedDecorations = [];
            uploadedImages = [];
            
            // Reset UI
            document.querySelectorAll('.option-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelector('[data-paper="vintage"]').classList.add('active');
            document.querySelector('[data-font="caveat"]').classList.add('active');
            document.querySelector('[data-color="#3B3A39"]').classList.add('active');
            
            updatePreview();
            updateDecorationPreview();
            updateUploadedImages();
        }

        function cancelWriting() {
            resetWriteForm();
            showView('mailbox');
        }

        function updateReceivedLetters() {
            const grid = document.getElementById('received-grid');
            if (!grid) return;
            
            const receivedLetters = state.letters.filter(letter => letter.received || letter.from !== 'You');

            if (receivedLetters.length === 0) {
                grid.innerHTML = '<div style="text-align: center; padding: 40px; font-family: \'Caveat\', cursive; font-size: 1.2rem; color: var(--moss); opacity: 0.7;">No received letters yet. Check your mailbox for new mail!</div>';
                return;
            }

            grid.innerHTML = receivedLetters.map(letter => {
                const date = new Date(letter.dateISO).toLocaleDateString();
                return `
                    <div class="memory-item" onclick="openReceivedLetter('${letter.id}')" role="button" tabindex="0" onkeydown="if(event.key==='Enter') openReceivedLetter('${letter.id}')">
                        <h3>${letter.subject}</h3>
                        <p>From: ${letter.from} • ${date}</p>
                        <p>${letter.body.substring(0, 100)}${letter.body.length > 100 ? '...' : ''}</p>
                    </div>
                `;
            }).join('');
        }

        function openReceivedLetter(letterId) {
            const letter = state.letters.find(l => l.id === letterId);
            if (letter) {
                state.currentLetter = letter;
                displayLetter(letter);
                showView('letter');
            }
        }

        function filterReceivedLetters(searchTerm) {
            const items = document.querySelectorAll('#received-grid .memory-item');
            const term = searchTerm.toLowerCase();

            items.forEach(item => {
                const text = item.textContent.toLowerCase();
                if (text.includes(term)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function replyToLetter() {
            if (state.currentLetter) {
                setupWriteForm(true, state.currentLetter);
                showView('write');
            }
        }

        // Drag and drop functionality
        let draggedStamp = null;
        let draggedElement = null;

        function dragStart(event) {
            draggedStamp = event.target.dataset.stamp;
            draggedElement = event.target;
            event.target.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'copy';
        }

        function allowDrop(event) {
            event.preventDefault();
            event.dataTransfer.dropEffect = 'copy';
        }

        function dropStamp(event) {
            event.preventDefault();
            event.stopPropagation();
            
            if (draggedStamp) {
                const envelope = document.querySelector('.envelope');
                const rect = envelope.getBoundingClientRect();
                const x = event.clientX - rect.left;
                const y = event.clientY - rect.top;

                const newStamp = document.createElement('div');
                newStamp.className = 'stamp on-envelope';
                newStamp.style.left = Math.max(5, Math.min(envelope.offsetWidth - 50, x - 22)) + 'px';
                newStamp.style.top = Math.max(5, Math.min(envelope.offsetHeight - 50, y - 22)) + 'px';
                newStamp.style.transform = `rotate(${Math.random() * 20 - 10}deg)`;
                newStamp.textContent = draggedStamp;
                newStamp.style.background = getRandomStampColor();
                newStamp.onclick = function(e) { 
                    e.stopPropagation(); 
                    removeStamp(newStamp);
                };
                
                envelope.appendChild(newStamp);

                const stampId = Date.now() + Math.random();
                newStamp.dataset.stampId = stampId;
                saveStampPosition(stampId, draggedStamp, newStamp.style.left, newStamp.style.top, newStamp.style.transform);
                
                showToast(`${draggedStamp} stamp placed!`);
            }
            
            if (draggedElement) {
                draggedElement.classList.remove('dragging');
            }
            draggedStamp = null;
            draggedElement = null;
        }

        function getRandomStampColor() {
            const colors = ['var(--warm-yellow)', 'var(--dusty-blue)', 'var(--faded-rose)', 'var(--moss)', '#E6B3BA', '#A8DADC'];
            return colors[Math.floor(Math.random() * colors.length)];
        }

        function saveStampPosition(stampId, stampEmoji, left, top, transform) {
            if (!window.placedStamps) {
                window.placedStamps = [];
            }
            
            window.placedStamps.push({
                id: stampId,
                emoji: stampEmoji,
                left: left,
                top: top,
                transform: transform
            });
            
            localStorage.setItem('envelopeStamps', JSON.stringify(window.placedStamps));
        }

        function removeStamp(stampElement) {
            const stampId = stampElement.dataset.stampId;
            
            stampElement.style.transition = 'all 0.3s ease';
            stampElement.style.transform = 'scale(0) rotate(180deg)';
            stampElement.style.opacity = '0';
            
            setTimeout(() => {
                if (stampElement.parentNode) {
                    stampElement.remove();
                }
            }, 300);
            
            if (window.placedStamps) {
                window.placedStamps = window.placedStamps.filter(s => s.id != stampId);
                localStorage.setItem('envelopeStamps', JSON.stringify(window.placedStamps));
            }
            
            showToast('Stamp removed!');
        }

        function clearAllStamps() {
            const envelope = document.querySelector('.envelope');
            const stamps = envelope.querySelectorAll('.stamp.on-envelope');
            
            stamps.forEach(stamp => {
                stamp.style.transition = 'all 0.3s ease';
                stamp.style.transform = 'scale(0) rotate(180deg)';
                stamp.style.opacity = '0';
            });
            
            setTimeout(() => {
                stamps.forEach(stamp => {
                    if (stamp.parentNode) {
                        stamp.remove();
                    }
                });
            }, 300);
            
            window.placedStamps = [];
            localStorage.removeItem('envelopeStamps');
            
            showToast('All stamps cleared!');
        }

        function loadSavedStamps() {
            const saved = localStorage.getItem('envelopeStamps');
            if (saved) {
                window.placedStamps = JSON.parse(saved);
                const envelope = document.querySelector('.envelope');
                if (envelope && window.placedStamps) {
                    window.placedStamps.forEach(stampData => {
                        const stamp = document.createElement('div');
                        stamp.className = 'stamp on-envelope';
                        stamp.style.left = stampData.left;
                        stamp.style.top = stampData.top;
                        stamp.style.transform = stampData.transform;
                        stamp.style.background = getRandomStampColor();
                        stamp.textContent = stampData.emoji;
                        stamp.dataset.stampId = stampData.id;
                        stamp.onclick = function(e) { 
                            e.stopPropagation(); 
                            removeStamp(stamp);
                        };
                        envelope.appendChild(stamp);
                    });
                }
            }
        }

        function showToast(message) {
            const existingToast = document.querySelector('.toast');
            if (existingToast) {
                existingToast.remove();
            }

            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.textContent = message;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'polite');
            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 3000);
        }

        // Keyboard navigation
        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
                const currentView = document.querySelector('.view.active');
                if (currentView.id === 'letter-view') {
                    closeLetter();
                } else {
                    showView('mailbox');
                }
            } else if (event.key === 'r' || event.key === 'R') {
                const currentView = document.querySelector('.view.active');
                if (currentView.id === 'letter-view' && state.currentLetter) {
                    replyToLetter();
                }
            }
        });

        // Clean up drag classes
        document.addEventListener('dragend', (event) => {
            if (event.target.classList.contains('stamp')) {
                event.target.classList.remove('dragging');
            }
        });

        // Prevent envelope opening when clicking on stamps
        document.addEventListener('click', (event) => {
            if (event.target.classList.contains('on-envelope')) {
                event.stopPropagation();
            }
        });

        // Customization functions
        function initializeCustomization() {
            // Paper selection
            document.querySelectorAll('[data-paper]').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('[data-paper]').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    selectedPaper = this.dataset.paper;
                    updatePreview();
                    showToast(`Paper style changed to ${this.title}`);
                });
            });

            // Font selection
            document.querySelectorAll('[data-font]').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('[data-font]').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    selectedFont = this.dataset.font;
                    updatePreview();
                });
            });

            // Color selection
            document.querySelectorAll('[data-color]').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('[data-color]').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    selectedColor = this.dataset.color;
                    updatePreview();
                });
            });

            // Decoration selection
            document.querySelectorAll('[data-decoration]').forEach(btn => {
                btn.addEventListener('click', function() {
                    const decoration = this.dataset.decoration;
                    if (!selectedDecorations.includes(decoration)) {
                        selectedDecorations.push(decoration);
                        updateDecorationPreview();
                        updatePreview();
                    }
                });
            });
        }

        function getFontFamily(fontStyle) {
            const fonts = {
                'caveat': "'Caveat', cursive",
                'special-elite': "'Special Elite', monospace",
                'serif': 'serif',
                'cursive': 'cursive'
            };
            return fonts[fontStyle] || "'Caveat', cursive";
        }

        function updatePreview() {
            const bodyText = document.getElementById('body-field').value || 'Dear friend...';
            const previewCard = document.getElementById('preview-card');
            const previewText = document.getElementById('preview-text');
            const previewContent = document.getElementById('preview-content');
            const writeForm = document.querySelector('.write-form');
            
            // Apply paper style to both write form and preview
            previewCard.className = `preview-card paper-${selectedPaper}`;
            writeForm.className = `write-form paper-${selectedPaper}`;
            
            // Apply font and color
            const fontFamily = getFontFamily(selectedFont);
            previewContent.style.fontFamily = fontFamily;
            previewContent.style.color = selectedColor;
            
            previewText.textContent = bodyText;
        }

        function updateDecorationPreview() {
            const preview = document.getElementById('decoration-preview');
            const previewDecorations = document.getElementById('preview-decorations');
            
            preview.innerHTML = selectedDecorations.map(decoration => 
                `<span class="decoration-item" onclick="removeDecoration('${decoration}')">${decoration}</span>`
            ).join('');
            
            previewDecorations.textContent = selectedDecorations.join(' ');
        }

        function removeDecoration(decoration) {
            selectedDecorations = selectedDecorations.filter(d => d !== decoration);
            updateDecorationPreview();
            updatePreview();
        }

        function handleImageUpload(event) {
            const files = Array.from(event.target.files);
            
            files.forEach(file => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        uploadedImages.push(e.target.result);
                        updateUploadedImages();
                        updatePreview();
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        function updateUploadedImages() {
            const container = document.getElementById('uploaded-images');
            const previewImages = document.getElementById('preview-images');
            
            container.innerHTML = uploadedImages.map((img, index) => `
                <div class="uploaded-image">
                    <img src="${img}" alt="Uploaded image">
                    <button class="remove-image" onclick="removeImage(${index})">×</button>
                </div>
            `).join('');
            
            previewImages.innerHTML = uploadedImages.map(img => 
                `<img src="${img}" alt="Preview image">`
            ).join('');
        }

        function removeImage(index) {
            uploadedImages.splice(index, 1);
            updateUploadedImages();
            updatePreview();
        }

        // Initialize app when page loads
        document.addEventListener('DOMContentLoaded', () => {
            initializeApp();
            loadSavedStamps();
            initializeCustomization();
        });
    </script>
</body>
</html>
